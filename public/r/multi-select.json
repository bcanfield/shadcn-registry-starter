{
  "name": "multi-select",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "separator",
    "button",
    "badge",
    "popover",
    "command"
  ],
  "files": [
    {
      "path": "ui/multi-select.tsx",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport {\n  CheckIcon,\n  XCircle,\n  ChevronDown,\n  XIcon,\n  WandSparkles,\n} from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\n\n/**\n * Variants for the multi-select component to handle different styles.\n * Uses class-variance-authority (cva) to define different styles based on \"variant\" prop.\n */\nconst multiSelectVariants = cva(\n  \"m-1 transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110 duration-300\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-foreground/10 text-foreground bg-card hover:bg-card/80\",\n        secondary:\n          \"border-foreground/10 bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        inverted: \"inverted\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\n/**\n * Props for MultiSelect component\n */\ninterface MultiSelectProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof multiSelectVariants> {\n  /**\n   * An array of option objects to be displayed in the multi-select component.\n   * Each option object has a label, value, and an optional icon.\n   */\n  options: {\n    /** The text to display for the option. */\n    label: string;\n    /** The unique value associated with the option. */\n    value: string;\n    /** Optional icon component to display alongside the option. */\n    icon?: React.ComponentType<{ className?: string }>;\n  }[];\n\n  /**\n   * Callback function triggered when the selected values change.\n   * Receives an array of the new selected values.\n   */\n  onValueChange: (value: string[]) => void;\n\n  /** The default selected values when the component mounts. */\n  defaultValue?: string[];\n\n  /**\n   * Placeholder text to be displayed when no values are selected.\n   * Optional, defaults to \"Select options\".\n   */\n  placeholder?: string;\n\n  /**\n   * Animation duration in seconds for the visual effects (e.g., bouncing badges).\n   * Optional, defaults to 0 (no animation).\n   */\n  animation?: number;\n\n  /**\n   * Maximum number of items to display. Extra selected items will be summarized.\n   * Optional, defaults to 3.\n   */\n  maxCount?: number;\n\n  /**\n   * The modality of the popover. When set to true, interaction with outside elements\n   * will be disabled and only popover content will be visible to screen readers.\n   * Optional, defaults to false.\n   */\n  modalPopover?: boolean;\n\n  /**\n   * If true, renders the multi-select component as a child of another component.\n   * Optional, defaults to false.\n   */\n  asChild?: boolean;\n\n  /**\n   * Additional class names to apply custom styles to the multi-select component.\n   * Optional, can be used to add custom styles.\n   */\n  className?: string;\n}\n\nexport const MultiSelect = React.forwardRef<\n  HTMLButtonElement,\n  MultiSelectProps\n>(\n  (\n    {\n      options,\n      onValueChange,\n      variant,\n      defaultValue = [],\n      placeholder = \"Select options\",\n      animation = 0,\n      maxCount = 3,\n      modalPopover = false,\n      asChild = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const [selectedValues, setSelectedValues] =\n      React.useState<string[]>(defaultValue);\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n    const [isAnimating, setIsAnimating] = React.useState(false);\n\n    const handleInputKeyDown = (\n      event: React.KeyboardEvent<HTMLInputElement>,\n    ) => {\n      if (event.key === \"Enter\") {\n        setIsPopoverOpen(true);\n      } else if (event.key === \"Backspace\" && !event.currentTarget.value) {\n        const newSelectedValues = [...selectedValues];\n        newSelectedValues.pop();\n        setSelectedValues(newSelectedValues);\n        onValueChange(newSelectedValues);\n      }\n    };\n\n    const toggleOption = (option: string) => {\n      const newSelectedValues = selectedValues.includes(option)\n        ? selectedValues.filter((value) => value !== option)\n        : [...selectedValues, option];\n      setSelectedValues(newSelectedValues);\n      onValueChange(newSelectedValues);\n    };\n\n    const handleClear = () => {\n      setSelectedValues([]);\n      onValueChange([]);\n    };\n\n    const handleTogglePopover = () => {\n      setIsPopoverOpen((prev) => !prev);\n    };\n\n    const clearExtraOptions = () => {\n      const newSelectedValues = selectedValues.slice(0, maxCount);\n      setSelectedValues(newSelectedValues);\n      onValueChange(newSelectedValues);\n    };\n\n    const toggleAll = () => {\n      if (selectedValues.length === options.length) {\n        handleClear();\n      } else {\n        const allValues = options.map((option) => option.value);\n        setSelectedValues(allValues);\n        onValueChange(allValues);\n      }\n    };\n\n    return (\n      <Popover\n        open={isPopoverOpen}\n        onOpenChange={setIsPopoverOpen}\n        modal={modalPopover}\n      >\n        <PopoverTrigger asChild>\n          <Button\n            ref={ref}\n            {...props}\n            onClick={handleTogglePopover}\n            className={cn(\n              \"flex w-full p-1 rounded-md border min-h-10 h-auto items-center justify-between bg-inherit hover:bg-inherit\",\n              className,\n            )}\n          >\n            {selectedValues.length > 0 ? (\n              <div className=\"flex justify-between items-center w-full\">\n                <div className=\"flex flex-wrap items-center\">\n                  {selectedValues.slice(0, maxCount).map((value) => {\n                    const option = options.find((o) => o.value === value);\n                    const IconComponent = option?.icon;\n                    return (\n                      <Badge\n                        key={value}\n                        className={cn(\n                          isAnimating ? \"animate-bounce\" : \"\",\n                          multiSelectVariants({ variant }),\n                        )}\n                        style={{ animationDuration: `${animation}s` }}\n                      >\n                        {IconComponent && (\n                          <IconComponent className=\"h-4 w-4 mr-2\" />\n                        )}\n                        {option?.label}\n                        <XCircle\n                          className=\"ml-2 h-4 w-4 cursor-pointer\"\n                          onClick={(event) => {\n                            event.stopPropagation();\n                            toggleOption(value);\n                          }}\n                        />\n                      </Badge>\n                    );\n                  })}\n                  {selectedValues.length > maxCount && (\n                    <Badge\n                      className={cn(\n                        \"bg-transparent text-foreground border-foreground/1 hover:bg-transparent\",\n                        isAnimating ? \"animate-bounce\" : \"\",\n                        multiSelectVariants({ variant }),\n                      )}\n                      style={{ animationDuration: `${animation}s` }}\n                    >\n                      {`+ ${selectedValues.length - maxCount} more`}\n                      <XCircle\n                        className=\"ml-2 h-4 w-4 cursor-pointer\"\n                        onClick={(event) => {\n                          event.stopPropagation();\n                          clearExtraOptions();\n                        }}\n                      />\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <XIcon\n                    className=\"h-4 mx-2 cursor-pointer text-muted-foreground\"\n                    onClick={(event) => {\n                      event.stopPropagation();\n                      handleClear();\n                    }}\n                  />\n                  <Separator\n                    orientation=\"vertical\"\n                    className=\"flex min-h-6 h-full\"\n                  />\n                  <ChevronDown className=\"h-4 mx-2 cursor-pointer text-muted-foreground\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-between w-full mx-auto\">\n                <span className=\"text-sm text-muted-foreground mx-3\">\n                  {placeholder}\n                </span>\n                <ChevronDown className=\"h-4 cursor-pointer text-muted-foreground mx-2\" />\n              </div>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"w-auto p-0\"\n          align=\"start\"\n          onEscapeKeyDown={() => setIsPopoverOpen(false)}\n        >\n          <Command>\n            <CommandInput\n              placeholder=\"Search...\"\n              onKeyDown={handleInputKeyDown}\n            />\n            <CommandList>\n              <CommandEmpty>No results found.</CommandEmpty>\n              <CommandGroup>\n                <CommandItem\n                  key=\"all\"\n                  onSelect={toggleAll}\n                  className=\"cursor-pointer\"\n                >\n                  <div\n                    className={cn(\n                      \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n                      selectedValues.length === options.length\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"opacity-50 [&_svg]:invisible\",\n                    )}\n                  >\n                    <CheckIcon className=\"h-4 w-4\" />\n                  </div>\n                  <span>(Select All)</span>\n                </CommandItem>\n                {options.map((option) => {\n                  const isSelected = selectedValues.includes(option.value);\n                  return (\n                    <CommandItem\n                      key={option.value}\n                      onSelect={() => toggleOption(option.value)}\n                      className=\"cursor-pointer\"\n                    >\n                      <div\n                        className={cn(\n                          \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n                          isSelected\n                            ? \"bg-primary text-primary-foreground\"\n                            : \"opacity-50 [&_svg]:invisible\",\n                        )}\n                      >\n                        <CheckIcon className=\"h-4 w-4\" />\n                      </div>\n                      {option.icon && (\n                        <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                      )}\n                      <span>{option.label}</span>\n                    </CommandItem>\n                  );\n                })}\n              </CommandGroup>\n              <CommandSeparator />\n              <CommandGroup>\n                <div className=\"flex items-center justify-between\">\n                  {selectedValues.length > 0 && (\n                    <>\n                      <CommandItem\n                        onSelect={handleClear}\n                        className=\"flex-1 justify-center cursor-pointer\"\n                      >\n                        Clear\n                      </CommandItem>\n                      <Separator\n                        orientation=\"vertical\"\n                        className=\"flex min-h-6 h-full\"\n                      />\n                    </>\n                  )}\n                  <CommandItem\n                    onSelect={() => setIsPopoverOpen(false)}\n                    className=\"flex-1 justify-center cursor-pointer max-w-full\"\n                  >\n                    Close\n                  </CommandItem>\n                </div>\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n        {animation > 0 && selectedValues.length > 0 && (\n          <WandSparkles\n            className={cn(\n              \"cursor-pointer my-2 text-foreground bg-background w-3 h-3\",\n              isAnimating ? \"\" : \"text-muted-foreground\",\n            )}\n            onClick={() => setIsAnimating(!isAnimating)}\n          />\n        )}\n      </Popover>\n    );\n  },\n);\n\nMultiSelect.displayName = \"MultiSelect\";\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}